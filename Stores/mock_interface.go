// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package Stores is a generated GoMock package.
package Stores

import (
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
	model "github.com/shaurya-zopsmart/Gopr-devlopment/model"
)

// MockStoreint is a mock of Storeint interface.
type MockStoreint struct {
	ctrl     *gomock.Controller
	recorder *MockStoreintMockRecorder
}

// MockStoreintMockRecorder is the mock recorder for MockStoreint.
type MockStoreintMockRecorder struct {
	mock *MockStoreint
}

// NewMockStoreint creates a new mock instance.
func NewMockStoreint(ctrl *gomock.Controller) *MockStoreint {
	mock := &MockStoreint{ctrl: ctrl}
	mock.recorder = &MockStoreintMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreint) EXPECT() *MockStoreintMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStoreint) Create(prod model.Product, ctx *gofr.Context) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", prod, ctx)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStoreintMockRecorder) Create(prod, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStoreint)(nil).Create), prod, ctx)
}

// Delete mocks base method.
func (m *MockStoreint) Delete(id int, ctx *gofr.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreintMockRecorder) Delete(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStoreint)(nil).Delete), id, ctx)
}

// GetAllUser mocks base method.
func (m *MockStoreint) GetAllUser(ctx *gofr.Context) ([]*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUser", ctx)
	ret0, _ := ret[0].([]*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUser indicates an expected call of GetAllUser.
func (mr *MockStoreintMockRecorder) GetAllUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUser", reflect.TypeOf((*MockStoreint)(nil).GetAllUser), ctx)
}

// GetById mocks base method.
func (m *MockStoreint) GetById(Id int, ctx *gofr.Context) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", Id, ctx)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockStoreintMockRecorder) GetById(Id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockStoreint)(nil).GetById), Id, ctx)
}

// Update mocks base method.
func (m *MockStoreint) Update(prod model.Product, ctx *gofr.Context) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", prod, ctx)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStoreintMockRecorder) Update(prod, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStoreint)(nil).Update), prod, ctx)
}

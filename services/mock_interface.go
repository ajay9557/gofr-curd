// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	models "github.com/Training/gofr-curd/models"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DeleteByProductID mocks base method.
func (m *MockService) DeleteByProductID(ctx *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProductID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByProductID indicates an expected call of DeleteByProductID.
func (mr *MockServiceMockRecorder) DeleteByProductID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProductID", reflect.TypeOf((*MockService)(nil).DeleteByProductID), ctx, id)
}

// GetByUserID mocks base method.
func (m *MockService) GetByUserID(ctx *gofr.Context, id int) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, id)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockServiceMockRecorder) GetByUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockService)(nil).GetByUserID), ctx, id)
}

// GetProducts mocks base method.
func (m *MockService) GetProducts(ctx *gofr.Context) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockServiceMockRecorder) GetProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockService)(nil).GetProducts), ctx)
}

// InsertProduct mocks base method.
func (m *MockService) InsertProduct(ctx *gofr.Context, product models.Product) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", ctx, product)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockServiceMockRecorder) InsertProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockService)(nil).InsertProduct), ctx, product)
}

// UpdateByProductID mocks base method.
func (m *MockService) UpdateByProductID(ctx *gofr.Context, product models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByProductID", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByProductID indicates an expected call of UpdateByProductID.
func (mr *MockServiceMockRecorder) UpdateByProductID(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByProductID", reflect.TypeOf((*MockService)(nil).UpdateByProductID), ctx, product)
}

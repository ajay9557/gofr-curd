// Code generated by MockGen. DO NOT EDIT.
// Source: /home/raramuri/repo/go/src/zopsmart/gofr-curd/service/interface.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"
	model "zopsmart/gofr-curd/model"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockProductservice is a mock of Productservice interface.
type MockProductservice struct {
	ctrl     *gomock.Controller
	recorder *MockProductserviceMockRecorder
}

// MockProductserviceMockRecorder is the mock recorder for MockProductservice.
type MockProductserviceMockRecorder struct {
	mock *MockProductservice
}

// NewMockProductservice creates a new mock instance.
func NewMockProductservice(ctrl *gomock.Controller) *MockProductservice {
	mock := &MockProductservice{ctrl: ctrl}
	mock.recorder = &MockProductserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductservice) EXPECT() *MockProductserviceMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductservice) AddProduct(arg0 *gofr.Context, arg1 model.Product) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0, arg1)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductserviceMockRecorder) AddProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductservice)(nil).AddProduct), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockProductservice) DeleteByID(ctx *gofr.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockProductserviceMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockProductservice)(nil).DeleteByID), ctx, id)
}

// GetByID mocks base method.
func (m *MockProductservice) GetByID(ctx *gofr.Context, id string) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProductserviceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProductservice)(nil).GetByID), ctx, id)
}

// GetProducts mocks base method.
func (m *MockProductservice) GetProducts(ctx *gofr.Context) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductserviceMockRecorder) GetProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductservice)(nil).GetProducts), ctx)
}

// UpdateByID mocks base method.
func (m *MockProductservice) UpdateByID(ctx *gofr.Context, prod model.Product, id string) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, prod, id)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockProductserviceMockRecorder) UpdateByID(ctx, prod, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockProductservice)(nil).UpdateByID), ctx, prod, id)
}

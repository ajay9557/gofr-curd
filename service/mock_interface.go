// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service is a generated GoMock package.
package service

import (
	models "gofr-curd/models"
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DeleteProductByID mocks base method.
func (m *MockService) DeleteProductByID(id int, ctx *gofr.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductByID", id, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductByID indicates an expected call of DeleteProductByID.
func (mr *MockServiceMockRecorder) DeleteProductByID(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductByID", reflect.TypeOf((*MockService)(nil).DeleteProductByID), id, ctx)
}

// GetByProductID mocks base method.
func (m *MockService) GetByProductID(id int, ctx *gofr.Context) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProductID", id, ctx)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProductID indicates an expected call of GetByProductID.
func (mr *MockServiceMockRecorder) GetByProductID(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProductID", reflect.TypeOf((*MockService)(nil).GetByProductID), id, ctx)
}

// GetProducts mocks base method.
func (m *MockService) GetProducts(ctx *gofr.Context) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockServiceMockRecorder) GetProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockService)(nil).GetProducts), ctx)
}

// InsertProductDetails mocks base method.
func (m *MockService) InsertProductDetails(product models.Product, ctx *gofr.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProductDetails", product, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProductDetails indicates an expected call of InsertProductDetails.
func (mr *MockServiceMockRecorder) InsertProductDetails(product, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProductDetails", reflect.TypeOf((*MockService)(nil).InsertProductDetails), product, ctx)
}

// UpdateProductDetails mocks base method.
func (m *MockService) UpdateProductDetails(product models.Product, ctx *gofr.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductDetails", product, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductDetails indicates an expected call of UpdateProductDetails.
func (mr *MockServiceMockRecorder) UpdateProductDetails(product, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductDetails", reflect.TypeOf((*MockService)(nil).UpdateProductDetails), product, ctx)
}

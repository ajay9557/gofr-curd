// Code generated by MockGen. DO NOT EDIT.
// Source: /home/raramuri/Desktop/go/src/gofr-curd/service/Interface.go

// Package service is a generated GoMock package.
package service

import (
	model "gofr-curd/model"
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DeleteByProductId mocks base method.
func (m *MockService) DeleteByProductId(ctx *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByProductId", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByProductId indicates an expected call of DeleteByProductId.
func (mr *MockServiceMockRecorder) DeleteByProductId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByProductId", reflect.TypeOf((*MockService)(nil).DeleteByProductId), ctx, id)
}

// GetByProductId mocks base method.
func (m *MockService) GetByProductId(id int, ctx *gofr.Context) (model.ProductDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProductId", id, ctx)
	ret0, _ := ret[0].(model.ProductDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProductId indicates an expected call of GetByProductId.
func (mr *MockServiceMockRecorder) GetByProductId(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProductId", reflect.TypeOf((*MockService)(nil).GetByProductId), id, ctx)
}

// GetProducts mocks base method.
func (m *MockService) GetProducts(ctx *gofr.Context) ([]model.ProductDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx)
	ret0, _ := ret[0].([]model.ProductDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockServiceMockRecorder) GetProducts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockService)(nil).GetProducts), ctx)
}

// InsertProduct mocks base method.
func (m *MockService) InsertProduct(ctx *gofr.Context, product model.ProductDetails) (model.ProductDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProduct", ctx, product)
	ret0, _ := ret[0].(model.ProductDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertProduct indicates an expected call of InsertProduct.
func (mr *MockServiceMockRecorder) InsertProduct(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProduct", reflect.TypeOf((*MockService)(nil).InsertProduct), ctx, product)
}

// UpdateByProductId mocks base method.
func (m *MockService) UpdateByProductId(ctx *gofr.Context, product model.ProductDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByProductId", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByProductId indicates an expected call of UpdateByProductId.
func (mr *MockServiceMockRecorder) UpdateByProductId(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByProductId", reflect.TypeOf((*MockService)(nil).UpdateByProductId), ctx, product)
}

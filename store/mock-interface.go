// Code generated by MockGen. DO NOT EDIT.
// Source: /home/raramuri/repo/go/src/zopsmart/gofr-curd/store/interface.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"
	model "zopsmart/gofr-curd/model"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockProductstorer is a mock of Productstorer interface.
type MockProductstorer struct {
	ctrl     *gomock.Controller
	recorder *MockProductstorerMockRecorder
}

// MockProductstorerMockRecorder is the mock recorder for MockProductstorer.
type MockProductstorerMockRecorder struct {
	mock *MockProductstorer
}

// NewMockProductstorer creates a new mock instance.
func NewMockProductstorer(ctrl *gomock.Controller) *MockProductstorer {
	mock := &MockProductstorer{ctrl: ctrl}
	mock.recorder = &MockProductstorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductstorer) EXPECT() *MockProductstorerMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductstorer) AddProduct(arg0 *gofr.Context, arg1 model.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductstorerMockRecorder) AddProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductstorer)(nil).AddProduct), arg0, arg1)
}

// DeleteByID mocks base method.
func (m *MockProductstorer) DeleteByID(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockProductstorerMockRecorder) DeleteByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockProductstorer)(nil).DeleteByID), arg0, arg1)
}

// GetProductByID mocks base method.
func (m *MockProductstorer) GetProductByID(arg0 *gofr.Context, arg1 int) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", arg0, arg1)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductstorerMockRecorder) GetProductByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductstorer)(nil).GetProductByID), arg0, arg1)
}

// GetProducts mocks base method.
func (m *MockProductstorer) GetProducts(arg0 *gofr.Context) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", arg0)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductstorerMockRecorder) GetProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductstorer)(nil).GetProducts), arg0)
}

// UpdateByID mocks base method.
func (m *MockProductstorer) UpdateByID(arg0 *gofr.Context, arg1 model.Product) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", arg0, arg1)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockProductstorerMockRecorder) UpdateByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockProductstorer)(nil).UpdateByID), arg0, arg1)
}

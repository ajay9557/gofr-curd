// Code generated by MockGen. DO NOT EDIT.
// Source: /home/raramuri/Desktop/go/src/gofr-curd/stores/interface.go

// Package stores is a generated GoMock package.
package stores

import (
	model "gofr-curd/model"
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateProducts mocks base method.
func (m *MockStore) CreateProducts(ctx *gofr.Context, product model.ProductDetails) (model.ProductDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProducts", ctx, product)
	ret0, _ := ret[0].(model.ProductDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProducts indicates an expected call of CreateProducts.
func (mr *MockStoreMockRecorder) CreateProducts(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProducts", reflect.TypeOf((*MockStore)(nil).CreateProducts), ctx, product)
}

// DeleteProductId mocks base method.
func (m *MockStore) DeleteProductId(ctx *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductId", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductId indicates an expected call of DeleteProductId.
func (mr *MockStoreMockRecorder) DeleteProductId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductId", reflect.TypeOf((*MockStore)(nil).DeleteProductId), ctx, id)
}

// GetAll mocks base method.
func (m *MockStore) GetAll(ctx *gofr.Context) ([]model.ProductDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.ProductDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStoreMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStore)(nil).GetAll), ctx)
}

// GetProductById mocks base method.
func (m *MockStore) GetProductById(id int, ctx *gofr.Context) (model.ProductDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", id, ctx)
	ret0, _ := ret[0].(model.ProductDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockStoreMockRecorder) GetProductById(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockStore)(nil).GetProductById), id, ctx)
}

// UpdateProductById mocks base method.
func (m *MockStore) UpdateProductById(ctx *gofr.Context, prod model.ProductDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductById", ctx, prod)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductById indicates an expected call of UpdateProductById.
func (mr *MockStoreMockRecorder) UpdateProductById(ctx, prod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductById", reflect.TypeOf((*MockStore)(nil).UpdateProductById), ctx, prod)
}

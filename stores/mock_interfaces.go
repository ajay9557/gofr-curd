// Code generated by MockGen. DO NOT EDIT.
// Source: gofr-curd/stores (interfaces: Istore)

// Package stores is a generated GoMock package.
package stores

import (
	models "gofr-curd/models"
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockIstore is a mock of Istore interface.
type MockIstore struct {
	ctrl     *gomock.Controller
	recorder *MockIstoreMockRecorder
}

// MockIstoreMockRecorder is the mock recorder for MockIstore.
type MockIstoreMockRecorder struct {
	mock *MockIstore
}

// NewMockIstore creates a new mock instance.
func NewMockIstore(ctrl *gomock.Controller) *MockIstore {
	mock := &MockIstore{ctrl: ctrl}
	mock.recorder = &MockIstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIstore) EXPECT() *MockIstoreMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockIstore) CreateProduct(arg0 *gofr.Context, arg1 models.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockIstoreMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockIstore)(nil).CreateProduct), arg0, arg1)
}

// DeleteById mocks base method.
func (m *MockIstore) DeleteById(arg0 *gofr.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIstoreMockRecorder) DeleteById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIstore)(nil).DeleteById), arg0, arg1)
}

// GetAllProducts mocks base method.
func (m *MockIstore) GetAllProducts(arg0 *gofr.Context) ([]*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts", arg0)
	ret0, _ := ret[0].([]*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockIstoreMockRecorder) GetAllProducts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockIstore)(nil).GetAllProducts), arg0)
}

// GetProductById mocks base method.
func (m *MockIstore) GetProductById(arg0 *gofr.Context, arg1 int) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", arg0, arg1)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockIstoreMockRecorder) GetProductById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockIstore)(nil).GetProductById), arg0, arg1)
}

// UpdateById mocks base method.
func (m *MockIstore) UpdateById(arg0 *gofr.Context, arg1 int, arg2 models.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockIstoreMockRecorder) UpdateById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockIstore)(nil).UpdateById), arg0, arg1, arg2)
}
